class Http implements Processor {
    protected property connection;
    protected property config;

    public method __ctor(hash config)
    {
        self.config = config;
    }

    public method handle(Connection connection)
    {
        self.connection = connection;

        request = self.readRequest();
        if (! request) {
            return null;
        }

        kernel = Kernel(self.connection);
        kernel.setConfiguration(self.config);
        response = kernel.process(request);

        if (! response) {
            response = Response(ResponseCode::STATUS_INTERNAL_SERVER_ERROR);
        }

        self.returnResponse(response);
    }

    public method readRequest()
    {
        // Check initial header line
        initial = self.connection.readLine();

        ret, matches = regex.match('|^(.+)\s+(.+)\s+HTTP/(\d\.\d)$|', initial);
        if (! ret) {
            response = Response(ResponseCode::STATUS_BAD_REQUEST);
            self.returnResponse(response);

            return;
        }

        method, url, version = matches;

        // Check HTTP version
        if (version != "1.0" || version != "1.1") {
            response = Response(ResponsCode::STATUS_VERSION_NOT_SUPPORTED, null, hash[[]], "")
            self.returnResponse(response);

            return;
        }

        // Read additional headers
        headers = hash[[]];
        s = "1";
        while (s) {
            s = self.connection.readLine();
            if (! s) continue;

            k, v = s.split(":", 2);
            headers[k] = v.trim();
        }

        body = "";

        now = date.now();
        info = hash[[
            'request_time' : now.format(Date.RFC1123),
            'request_time_epoch' : now.epoch(),
            'document_root' : self.config['doc_root'],
            'remote_address' : self.connection.getHost(),
            'remote_port' => self.connection.getPort(),
        ]];
        request = Request(method, url, headers, body, info);

        io.print "> Request done\n";

        return request;
    }

    protected method returnResponse(Response response)
    {
        self.setupResponseHeaders(response);
        self.sendResponse(response);
    }

    protected method setupResponseHeaders(Response response)
    {
        // Set default status message is none is set
        if (response.statusText() == null) {
            response.setStatusText(ResponseCode.getStatusMessage(response.getStatusCode()));
        }

        // Add additional headers
        len = response.getBody().length();
        if (len !== 0) {
            response.headers['content-length'] = response.getBody().length();
        }
        response.headers['connection'] = 'close';
        response.headers['date'] = Date.now().format(Date.RFC1123);
        response.headers['server'] = 'Saffire WebServer/1.0';
    }

    protected method sendResponse(Response response)
    {
        io.print("> Response status[", response.getStatusCode(),"] Body[", response.getBody().length(),"]\n");

        // Send initial header line
        self.connection.write("HTTP/1.1 ".response.getStatusCode()." ".response.getStatusText().toUpper()."\r\n");

        // Send headers
        foreach (response.headers as k,v) {
            self.connection.write(k.toLower().ucFirst(), ":", v ?? "", "\r\n");
        }

        // Header/Body separator
        self.connection.write("\r\n");

        // Send body
        self.connection.write(response.getBody());
    }

}

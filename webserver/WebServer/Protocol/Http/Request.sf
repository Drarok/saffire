class Request {
    protected property method;
    protected property uri;
    protected property headers;
    protected property info;

    protected property body;

    public method __ctor(method, uri, hash headers, string body = "", hash info)
    {
        self.method = method.toUpper();
        self.uri = uri;
        self.headers = headers;
        self.body = body;
        self.info = info;
    }

    public method getMethod()
    {
        return self.method;
    }

    public method isGet()
    {
        return self.method == "GET";
    }

    public method isPost()
    {
        return self.method == "POST";
    }

    public method isSafe()
    {
        return list[['GET', 'OPTIONS', 'HEAD']].has(self.method);
    }

    public method isIdempotent()
    {
        return list[['GET', 'OPTIONS', 'HEAD', 'PUT', 'DELETE']].has(self.method);
    }

    public method getUri()
    {
        return self.uri;
    }

    public method getUriParts(part = null)
    {

        // Taken from: http://php.net/manual/en/function.parse-url.php#83828
        r += "^(?:(?P<scheme>\w+)://)?";
        r += "(?:(?P<login>\w+):(?P<pass>\w+)@)?";
        r += "(?P<host>(?:(?P<subdomain>[\w\.]+)\.)?" . "(?P<domain>\w+\.(?P<extension>\w+)))";
        r += "(?::(?P<port>\d+))?";
        r += "(?P<path>[\w/]*/(?P<file>\w+(?:\.\w+)?)?)?";
        r += "(?:\?(?P<arg>[\w=&]+))?";
        r += "(?:#(?P<anchor>\w+))?";
        r = "!$r!";

        regex.match(r, self.uri, matches);

        if (part) {
            return matches[part] ?? false;
        }

        return matches;
    }

    public method getHeaders()
    {
        return self.headers;
    }

    public method hasHeader(header)
    {
        return self.headers.has(header);
    }

    public method getHeader(header, default = false)
    {
        return self.headers.has(header) ? self.header['header'] : default;
    }

    public method hasInfo(header)
    {
        return self.info.has(header);
    }

    public method getInfo(header)
    {
        return self.info.has(header) ? self.info['header'] : null;
    }

    public method getScheme() {
        return self.getUriParts('scheme');
    }
    public method getHost() {
        return self.getUriParts('host');
    }
    public method getPort() {
        return self.getUriParts('port');
    }
    public method getUser() {
        return self.getUriParts('user');
    }
    public method getPass() {
        return self.getUriParts('pass');
    }
    public method getPath() {
        return self.getUriParts('path');
    }
    public method getQuery() {
        return self.getUriParts('query');
    }
    public method getFragment() {
        return self.getUriParts('fragment');
    }

    public method getBody()
    {
        return self.body;
    }


}

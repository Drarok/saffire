title: coalesce tests
author: Joshua Thijssen <jthijssen@noxlogic.nl>

**********
// Simple null coalesce
import \saffire\io;

a = null;
b = a ?? "default";
io.print(b, "\n");
====
default
@@@@
// Simple null coalesce with non-false value
import \saffire\io;

a = "value";
b = a ?? "default";
io.print(b, "\n");
====
value
@@@@
// empty string, will result default value
import \saffire\io;

b = "" ?? "default";
io.print(b, "\n");
====
default
@@@@
// numerical 0, will result default value
import \saffire\io;
b = 0 ?? "default";
io.print(b, "\n");
====
default
@@@@
// numerical 1, just prints 1
import \saffire\io;
b = 1 ?? "default";
io.print(b, "\n");
====
1
@@@@
// Check if we can use result from methods
import \saffire\io;

class foo {
    static public method bar() {
        return false;
    }
    static public method baz() {
        return true;
    }
}

b = foo.bar() ?? "default";
io.print(b, "\n");
b = foo.baz() ?? "default";
io.print(b, "\n");
====
default
true
@@@@
// Chaining coalesce
import \saffire\io;

io.print((null ?? null ?? null), "\n");
io.print((null ?? "b"  ?? null), "\n");
io.print((null ?? null ?? "c" ), "\n");
io.print(("a"  ?? null ?? null), "\n");
io.print(("a"  ?? "b"  ?? null), "\n");
io.print((null ?? "b"  ?? "c" ), "\n");
io.print(("a"  ?? "b"  ?? "c" ), "\n");
=====
null
b
c
a
a
b
a



